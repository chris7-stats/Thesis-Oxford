import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import gaussian_kde
import torch

# Define the number of timesteps
timesteps = 1000
beta_start = 1e-4
beta_end = 0.02
betas = torch.linspace(beta_start, beta_end, timesteps)

# Compute alpha, alpha_bar
alphas = 1 - betas
alpha_bars = torch.cumprod(alphas, dim=0)

# Forward diffusion process
def forward_diffusion_sample(x0, t, noise):
    return torch.sqrt(alpha_bars[t]) * x0 + torch.sqrt(1 - alpha_bars[t]) * noise

# Reverse diffusion process (using a simple linear model for demonstration)
class SimpleReverseModel(torch.nn.Module):
    def __init__(self):
        super(SimpleReverseModel, self).__init__()
        self.dense = torch.nn.Linear(2, 2)

    def forward(self, x, t):
        return self.dense(x)

# Initialize model
model = SimpleReverseModel()

# Load some example data: Swiss roll
from sklearn.datasets import make_swiss_roll
data, _ = make_swiss_roll(n_samples=1000, noise=0.5)
data = data[:, [0, 2]] / 5.0

# Convert data to torch tensor
data = torch.tensor(data, dtype=torch.float32)

# Sample noise
noise = torch.randn_like(data)

# Generate noisy samples
steps = [0, 200, 400, 600, 800, 999]
noisy_samples = [forward_diffusion_sample(data, step, noise) for step in steps]

# Plotting forward diffusion
fig, axes = plt.subplots(2, 6, figsize=(18, 6))

# Plot forward diffusion samples
for i, sample in enumerate(noisy_samples):
    axes[0, i].scatter(sample[:, 0], sample[:, 1], alpha=0.5)
    axes[0, i].set_title(f'Step {steps[i]}')
    axes[0, i].set_xlim(-4, 4)
    axes[0, i].set_ylim(-4, 4)

# Plot densities
for i, sample in enumerate(noisy_samples):
    kde = gaussian_kde(sample[:, 0].numpy())
    x = np.linspace(-4, 4, 100)
    axes[1, i].plot(x, kde(x))
    axes[1, i].set_title(f'Density Step {steps[i]}')
    axes[1, i].set_xlim(-4, 4)
    axes[1, i].set_ylim(0, 0.6)

plt.tight_layout()
plt.show()

# Reverse diffusion process
def reverse_diffusion(model, shape):
    img = torch.randn(shape)
    for i in reversed(range(timesteps)):
        t = torch.full((shape[0],), i, dtype=torch.long)
        img = model(img, t)
    return img

# Reverse diffusion
reversed_samples = reverse_diffusion(model, data.shape)

# Plotting reverse diffusion
fig, axes = plt.subplots(2, 6, figsize=(18, 6))

# Plot reverse diffusion samples
for i, sample in enumerate(noisy_samples):
    axes[0, i].scatter(sample[:, 0], sample[:, 1], alpha=0.5)
    axes[0, i].set_title(f'Step {steps[i]}')
    axes[0, i].set_xlim(-4, 4)
    axes[0, i].set_ylim(-4, 4)

# Plot densities
for i, sample in enumerate(noisy_samples):
    kde = gaussian_kde(sample[:, 0].numpy())
    x = np.linspace(-4, 4, 100)
    axes[1, i].plot(x, kde(x))
    axes[1, i].set_title(f'Density Step {steps[i]}')
    axes[1, i].set_xlim(-4, 4)
    axes[1, i].set_ylim(0, 0.6)

plt.tight_layout()
plt.show()
